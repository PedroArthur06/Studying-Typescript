// Define uma fun√ß√£o 'logar' que √© um decorator factory (f√°brica de decorators).
// Ela recebe uma mensagem e retorna um decorator de m√©todo.
// Decorator de m√©todo recebe: alvo (classe/prot√≥tipo), nome do m√©todo e descritor do m√©todo.
function logar(mensagem: string) {
  return function(alvo: any, metodo: string, descritor: PropertyDescriptor) {
    const original = descritor.value; // Guarda a fun√ß√£o original

    // Substitui a fun√ß√£o original por uma nova fun√ß√£o que faz o log antes de executar o m√©todo.
    descritor.value = function(...args: any[]) {
      // Exibe a mensagem, o nome do m√©todo e os argumentos no console.
      console.log(`üìù ${mensagem}: ${metodo}(${args.join(", ")})`);
      // Executa o m√©todo original com os argumentos recebidos.
      return original.apply(this, args);
    };
  };
}

// Classe de exemplo para usar o decorator.
class Calculadora {
  // Aplica o decorator 'logar' ao m√©todo 'soma'.
  // Sempre que 'soma' for chamado, a mensagem ser√° exibida no console.
  @logar("C√°lculo executado")
  soma(a: number, b: number) {
    return a + b;
  }
}

// Cria uma inst√¢ncia da classe Calculadora.
const calc = new Calculadora();
// Chama o m√©todo 'soma', que agora exibe o log antes de retornar o